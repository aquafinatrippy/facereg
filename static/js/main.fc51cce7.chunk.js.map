{"version":3,"sources":["components/navigation/Navigation.js","components/logo/Logo.js","components/Imagelinkform/Imageform.js","components/FaceRecognition/FaceRecognition.js","components/SignIn/SignIn.js","components/register/Register.js","App.js","serviceWorker.js","index.js"],"names":["Navigation","_ref","onRouteChange","isSignedIn","react_default","a","createElement","Logo","className","tilt_default","options","max","style","height","width","Imageform","OnInputChange","onButtonSubmit","type","name","id","onChange","onClick","FaceRecognition","imageURL","box","src","alt","left","leftCol","top","topRow","right","rightCol","bottom","bottomRow","SignIn","value","Register","htmlFor","app","Clarifai","App","apiKey","particlesOptions","particles","number","density","enable","value_area","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","event","setState","input","target","calculateFaceLocation","data","clarifaiFace","outputs","regions","region_info","bounding_box","image","document","getElementById","Number","left_col","top_row","right_col","bottom_row","displayFaceBox","state","models","predict","FACE_DETECT_MODEL","then","response","err","console","log","route","_this$state","particles_default","params","navigation_Navigation","logo_Logo","Imagelinkform_Imageform","components_FaceRecognition_FaceRecognition","components_SignIn_SignIn","register_Register","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","App_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fc51cce7.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Navigation = ({onRouteChange, isSignedIn}) => {\r\n\r\n        if(isSignedIn){\r\n            return(\r\n                <div></div>\r\n            );\r\n\r\n           \r\n        }else{\r\n            return(\r\n                <div></div>\r\n            );\r\n            \r\n        }\r\n}\r\nexport default Navigation;","import React from 'react';\r\nimport Tilt from 'react-tilt'\r\nimport './logo.css';\r\n\r\nconst Logo = () => {\r\n    return(\r\n        <div className='ma4 mt0'>\r\n            <Tilt className=\"Tilt br2 shadow-2\" options={{ max : 25 }} style={{ height: 150, width: 150 }} >\r\n              <div className=\"Tilt-inner\"> </div>\r\n            </Tilt>\r\n        </div>\r\n    );\r\n}\r\nexport default Logo;","import React from 'react';\r\nimport './imageform.css';\r\n\r\nconst Imageform = ({ OnInputChange, onButtonSubmit }) => {\r\n    return(\r\n        <div>\r\n            <p className='f3 '>\r\n                {'See maagiline leht tuvastab nägusi, proovi järgi'}\r\n                \r\n\r\n            </p>\r\n            <div className='center'>\r\n            <div className='form center pa4 br3 shadow-5'>\r\n                <input type=\"text\" name=\"\" id=\"\" className='f4 pa2 w-70 center' onChange={OnInputChange} /><br/>\r\n                <button className='w-30 grow f4 link ph3 pv2 dib white bg-light-purple' onClick={onButtonSubmit} >Tuvasta</button>\r\n            </div>\r\n            </div>\r\n            {'Enter picture url to use face recognition'}\r\n        </div>\r\n    );\r\n}\r\nexport default Imageform;","import React from 'react';\r\nimport './facereg.css';\r\n\r\nconst FaceRecognition = ({ imageURL, box }) => {\r\n    return(\r\n        <div className='center ma'>\r\n            <div className='absolute mt2'>\r\n                <img src={imageURL} alt=\"\" width='500px' height='auto' id='inputimage' />\r\n                <div className='bounding-box' style={{left: box.leftCol, top: box.topRow, right: box.rightCol, bottom: box.bottomRow}}></div>\r\n            </div>\r\n            \r\n        </div>\r\n    );\r\n}\r\nexport default FaceRecognition;","import React from 'react';\r\n\r\nconst SignIn = ({onRouteChange}) => {\r\n    return(\r\n        <article className=\"br3 ba dark-gray b--black-10 mv4 w-100 w-50-m w-25-l mw6 shadow-5 center\">\r\n        <main className=\"pa4 black-80\">\r\n        <div className=\"measure\">\r\n          <fieldset id=\"sign_up\" className=\"ba b--transparent ph0 mh0\">\r\n            <legend className=\"f1 fw6 ph0 mh0 center\">Face recognition app</legend>\r\n            <p>Detects faces on picture, all done using React.js. Purpose was to learn React.</p>\r\n            \r\n          </fieldset>\r\n          <div className=\"\">\r\n            <input className=\"b ph3 pv2 input-reset ba b--black bg-transparent grow pointer f6 dib\" type=\"submit\" value=\"Start using\" onClick={() => onRouteChange('home')} />\r\n          </div>\r\n        </div>\r\n      </main> \r\n      </article> \r\n    );\r\n}\r\nexport default SignIn;","import React from 'react';\r\n\r\nconst Register = ({onRouteChange}) => {\r\n    return(\r\n        <article className=\"br3 ba dark-gray b--black-10 mv4 w-100 w-50-m w-25-l mw6 shadow-5 center\">\r\n        <main className=\"pa4 black-80\">\r\n        <div className=\"measure\">\r\n          <fieldset id=\"sign_up\" className=\"ba b--transparent ph0 mh0\">\r\n            <legend className=\"f1 fw6 ph0 mh0 center\">Registeeru</legend>\r\n            <div className=\"mt3\">\r\n              <label className=\"db fw6 lh-copy f6\" htmlFor=\"name\">Nimi</label>\r\n              <input className=\"pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" type=\"text\" name=\"name\"  id=\"name\" />\r\n            </div>\r\n            <div className=\"mt3\">\r\n              <label className=\"db fw6 lh-copy f6\" htmlFor=\"email-address\">Email</label>\r\n              <input className=\"pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" type=\"email\" name=\"email-address\"  id=\"email-address\" />\r\n            </div>\r\n            <div className=\"mv3\">\r\n              <label className=\"db fw6 lh-copy f6\" htmlFor=\"password\">Parool</label>\r\n              <input className=\"b pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" type=\"password\" name=\"password\"  id=\"password\" />\r\n            </div>\r\n          </fieldset>\r\n          <div className=\"\">\r\n            <input className=\"b ph3 pv2 input-reset ba b--black bg-transparent grow pointer f6 dib\" type=\"submit\" value=\"Registeeru\" onClick={() => onRouteChange('home')} />\r\n          </div>\r\n          \r\n        </div>\r\n      </main> \r\n      </article> \r\n    );\r\n}\r\nexport default Register;","import React from 'react';\r\nimport './App.css';\r\nimport Navigation from './components/navigation/Navigation';\r\nimport Logo from './components/logo/Logo';\r\nimport Imageform from './components/Imagelinkform/Imageform';\r\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition';\r\nimport SignIn from './components/SignIn/SignIn';\r\nimport Register from './components/register/Register';\r\nimport 'tachyons';\r\nimport Particles from 'react-particles-js';\r\nimport Clarifai from 'clarifai';\r\n\r\n\r\nconst app = new Clarifai.App({\r\n  apiKey: '07195c9ff13d4e8081a7dbc093894ae8'\r\n});\r\n\r\nconst particlesOptions = {\r\n  \r\n    particles: {\r\n      number: {\r\n        value: 70,\r\n        density: {\r\n          enable: true,\r\n          value_area: 800\r\n        }\r\n      }\r\n    }\r\n  \r\n}\r\n\r\nexport default class App extends React.Component{\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n      input : \"\",\r\n      imageURL:'',\r\n      box: {},\r\n      route: 'signin',\r\n      isSignedIn: false\r\n    }\r\n  }\r\n  OnInputChange = (event) => {\r\n    this.setState({input: event.target.value});\r\n  }\r\n  calculateFaceLocation = (data) =>{\r\n    const clarifaiFace = data.outputs[0].data.regions[0].region_info.bounding_box;\r\n    const image = document.getElementById('inputimage');\r\n    const width = Number(image.width);\r\n    const height = Number(image.height);\r\n    return {\r\n      leftCol: clarifaiFace.left_col * width,\r\n      topRow: clarifaiFace.top_row * height,\r\n      rightCol: width - (clarifaiFace.right_col * width),\r\n      bottomRow: height - (clarifaiFace.bottom_row * height)\r\n\r\n    }\r\n  }\r\n\r\n  displayFaceBox = (box) => {\r\n    this.setState({box: box})\r\n  }\r\n\r\n  onButtonSubmit = () => {\r\n    this.setState({imageURL: this.state.input});\r\n    app.models.predict(Clarifai.FACE_DETECT_MODEL, this.state.input).then(\r\n    (response) => {\r\n      this.displayFaceBox(this.calculateFaceLocation(response));},\r\n      (err) => { console.log(err); }\r\n  );\r\n  }\r\n\r\n  onRouteChange = (route) => {\r\n    if(route === 'signout'){\r\n      this.setState({isSignedIn: false});\r\n    }else if(route === 'home'){\r\n      this.setState({isSignedIn: true});\r\n    }\r\n    this.setState({route: route});\r\n  }\r\n\r\n  render(){\r\n    const { isSignedIn, imageURL, route, box} = this.state;\r\n    return (\r\n    <div className=\"App\">\r\n    \r\n        <Particles className='particles'\r\n        params={particlesOptions} />\r\n        <Navigation isSignedIn={isSignedIn} onRouteChange={this.onRouteChange} />\r\n        < Logo />\r\n        { route === 'home' \r\n        ?<div>\r\n          < Imageform OnInputChange={this.OnInputChange} onButtonSubmit={this.onButtonSubmit} />\r\n          < FaceRecognition imageURL={imageURL} box={box} />\r\n        </div> \r\n        :(\r\n          route === 'signin' ? \r\n          <SignIn onRouteChange={this.onRouteChange} />\r\n          : <Register onRouteChange={this.onRouteChange} />\r\n        )\r\n        }\r\n    </div>\r\n  );\r\n  }\r\n  \r\n}\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}